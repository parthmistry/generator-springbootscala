<% if (DOCKER) {%>import org.apache.tools.ant.taskdefs.condition.Os<% } %>
buildscript {
	ext {
		springBootVersion = '1.5.8.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'scala'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}

dependencies {
	compile "org.scala-lang:scala-library:${scala_full_version}"
	compile "org.springframework.boot:spring-boot-starter-web"<% if (RDBMS !== 'None') { %>
	compile "org.springframework.boot:spring-boot-starter-data-jpa"
	compile "org.liquibase:liquibase-core:3.5.3"
	<% if (RDBMS === 'Mysql') { %>compile "mysql:mysql-connector-java:5.1.6"<% } %><% } %><% if (AUTH !== 'None') { %>
	compile "org.springframework.boot:spring-boot-starter-security"
	<% if (AUTH === 'JWT') { %>compile "io.jsonwebtoken:jjwt:0.7.0"<% } %><% } %>
	compile "com.fasterxml.jackson.module:jackson-module-scala_${scala_version}:${jackson_version}"<% if (ELASTICSEARCH) { %>
	compile "org.elasticsearch:elasticsearch:${elasticsearch_version}"
	compile "com.sksamuel.elastic4s:elastic4s-core_${scala_version}:${elastic4s_version}"
	compile "com.sksamuel.elastic4s:elastic4s-tcp_${scala_version}:${elastic4s_version}"<% } %>
	testCompile 'org.springframework.boot:spring-boot-starter-test'<% if (ELASTICSEARCH) { %>
	testCompile "com.sksamuel.elastic4s:elastic4s-testkit_${scala_version}:${elastic4s_version}"
	testCompile "com.sksamuel.elastic4s:elastic4s-embedded_${scala_version}:${elastic4s_version}"<% } %>
}

<% if (DOCKER) {%>task buildDocker(type: Exec) {
	if (Os.isFamily(Os.FAMILY_WINDOWS)) {
		commandLine 'cmd', '/c', 'docker', 'build', '-f', './Dockerfile', '-t', '<%= NAME.toLowerCase() %>', '.'
	} else {
		commandLine 'docker', 'build', '-f', './Dockerfile', '-t', '<%= NAME.toLowerCase() %>', '.'
	}
}

task startDocker(type: Exec) {
	if (Os.isFamily(Os.FAMILY_WINDOWS)) {
		commandLine 'cmd', '/c', 'docker-compose', '-f', './docker-compose.yml', 'up', '-d'
	} else {
		commandLine 'docker-compose', '-f', './docker-compose.yml', 'up', '-d'
	}
}

task stopDocker(type: Exec) {
	if (Os.isFamily(Os.FAMILY_WINDOWS)) {
		commandLine 'cmd', '/c', 'docker-compose', '-f', './docker-compose.yml', 'down'
	} else {
		commandLine 'docker-compose', '-f', './docker-compose.yml', 'down'
	}
}<% } %>
